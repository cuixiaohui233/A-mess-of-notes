import psycopg2
import psycopg2.extras
import xml.dom.minidom
import sys
import os

# read database
conn = psycopg2.connect("dbname=postgis_test user=kong")
# get cursor
cur = conn.cursor()
cur1 = conn.cursor()
cur2 = conn.cursor()
# Execute the SQL statement by execute
cur.execute('SELECT gid, light_flag, z, node_id, st_astext((ST_DumpPoints(geom)).geom) from anheb;')
cur1.execute('SELECT * from arheb;')
cur2.execute('SELECT ways from relheb;')
# print(cur.fetchall())

# The query result is assigned to the variable points by the fetchall method
points = cur.fetchall()
ways = cur1.fetchall()
relations = cur2.fetchall()
# print (ways)
# Declare the writeInfoToXml function, which is used to generate the tag tag for OSM
def writeInfoToXml(points, ways, relations):
    doc = xml.dom.minidom.Document()
    osm = doc.createElement('osm')
    osm.setAttribute("version","0.6")
    doc.appendChild(osm)
    for point in points:
        node = doc.createElement('node')
        node.setAttribute("version","4")
        node.setAttribute("visible","true")
        node.setAttribute("id",str(point[0]))
        LonLat = point[4][6:-1].split(' ')
        node.setAttribute("lon",LonLat[0])
        node.setAttribute("lat",LonLat[1])
        if(point[1] == '1'):
            tag = doc.createElement('tag')
            tag.setAttribute("k","highway")
            tag.setAttribute("v","traffic_signals")
            node.appendChild(tag)
        osm.appendChild(node)

    for road in ways:
        way = doc.createElement('way')
        way.setAttribute("id",str(road[1]))
        way.setAttribute("version","4")
        way.setAttribute("visible","true")
        wayTag1 = doc.createElement('tag')
        wayTag2 = doc.createElement('tag')
        wayTag1.setAttribute("k","highway")
        wayTag1.setAttribute("v",road[2])
        wayTag2.setAttribute("k","oneway")
        wayTag2.setAttribute("v",road[3])
        way.appendChild(wayTag1)
        way.appendChild(wayTag2)

        # if str(road[1]) == '3004672':
        #     print(stop);

        ndSort = []
        for n in road[4]:
            ndSort = sorted(road[4], key=lambda i: int(i[1:-1].split(',')[1]))
        for n in ndSort:
            nd = doc.createElement('nd')
            nd.setAttribute('ref', n[1:-1].split(',')[0])
            way.appendChild(nd)
        osm.appendChild(way)
    for r in relations:
        R = list(r)
        # print(R)
        if len(r) == 3:
            relation = doc.createElement('relation')
            member1 = doc.createElement('menber')
            member2 = doc.createElement('menber')
            member3 = doc.createElement('menber')
            tag1 = doc.createElement('tag')
            tag2 = doc.createElement('tag')
            member1.setAttribute('type',"way")
            member1.setAttribute('ref',r[0][0])
            member1.setAttribute('role',"from")
            member2.setAttribute('type', "way")
            member2.setAttribute('ref',r[0][2])
            member2.setAttribute('role', "via")
            member3.setAttribute('type', "way")
            member3.setAttribute('ref', "")
            member3.setAttribute('role', "to")
            tag1.setAttribute("k","restriction")
            tag1.setAttribute("v","")
            tag2.setAttribute("k","type")
            tag2.setAttribute("v","restriction")
            relation.appendChild(member1)
            relation.appendChild(member2)
            relation.appendChild(member3)
            relation.appendChild(tag1)
            relation.appendChild(tag2)
        elif len(r) == 4:
            relation = doc.createElement('relation')
            member1 = doc.createElement('menber')
            member2 = doc.createElement('menber')
            member3 = doc.createElement('menber')
            member4 = doc.createElement('menber')
            tag1 = doc.createElement('tag')
            tag2 = doc.createElement('tag')
            member1.setAttribute('type', "way")
            member1.setAttribute('ref', r[0][0])
            member1.setAttribute('role', "from")
            member2.setAttribute('type', "way")
            member2.setAttribute('ref', r[0][2])
            member2.setAttribute('role', "from")
            member3.setAttribute('type', "way")
            member3.setAttribute('ref', "")
            member3.setAttribute('role', "via")
            member4.setAttribute('type', "way")
            member4.setAttribute('ref', r[0][3])
            member4.setAttribute('role', "to")
            tag1.setAttribute("k", "restriction")
            tag1.setAttribute("v", "")
            tag2.setAttribute("k", "type")
            tag2.setAttribute("v", "restriction")
            relation.appendChild(member1)
            relation.appendChild(member2)
            relation.appendChild(member3)
            relation.appendChild(tag1)
            relation.appendChild(tag2)
        elif len(r) == 5:
            relation = doc.createElement('relation')
            member1 = doc.createElement('menber')
            member2 = doc.createElement('menber')
            member3 = doc.createElement('menber')
            member4 = doc.createElement('menber')
            tag1 = doc.createElement('tag')
            tag2 = doc.createElement('tag')
            member1.setAttribute('type', "way")
            member1.setAttribute('ref', r[0][2])
            member1.setAttribute('role', "from")
            member2.setAttribute('type', "way")
            member2.setAttribute('ref', r[0][3])
            member2.setAttribute('role', "from")
            member3.setAttribute('type', "way")
            member3.setAttribute('ref', "")
            member3.setAttribute('role', "via")
            member4.setAttribute('type', "way")
            member4.setAttribute('ref', r[0][4])
            member4.setAttribute('role', "to")
            tag1.setAttribute("k", "restriction")
            tag1.setAttribute("v", "")
            tag2.setAttribute("k", "type")
            tag2.setAttribute("v", "restriction")
            relation.appendChild(member1)
            relation.appendChild(member2)
            relation.appendChild(member3)
            relation.appendChild(tag1)
            relation.appendChild(tag2)
        elif len(r) == 6:
            relation = doc.createElement('relation')
            member1 = doc.createElement('menber')
            member2 = doc.createElement('menber')
            member3 = doc.createElement('menber')
            tag1 = doc.createElement('tag')
            tag2 = doc.createElement('tag')
            member1.setAttribute('type', "way")
            member1.setAttribute('ref', r[0][2])
            member1.setAttribute('role', "from")
            member2.setAttribute('type', "way")
            member2.setAttribute('ref', r[0][3])
            member2.setAttribute('role', "from")
            member3.setAttribute('type', "way")
            member3.setAttribute('ref', "")
            member3.setAttribute('role', "via")
            member4.setAttribute('type', "way")
            member4.setAttribute('ref', r[0][4])
            member4.setAttribute('role', "to")
            tag1.setAttribute("k", "restriction")
            tag1.setAttribute("v", "")
            tag2.setAttribute("k", "type")
            tag2.setAttribute("v", "restriction")
            relation.appendChild(member1)
            relation.appendChild(member2)
            relation.appendChild(member3)
            relation.appendChild(tag1)
            relation.appendChild(tag2)
    osm.appendChild(relation)
    # open hlj.osm file
    fo = open("hlj.osm", 'w')
    # Insert the written label into the OSM file
    fo.write(doc.toprettyxml(indent='\t', encoding='utf-8'))
    return

writeInfoToXml(points,ways,relations)
